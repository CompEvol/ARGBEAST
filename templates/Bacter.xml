<beast version='2.0'
       namespace='beast.app.beauti:beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions'
       templateinfo='template for coalescent with gene conversion analyses'>

       <map name='connect' reserved='true'>beast.app.beauti.BeautiConnector</map>
       <map name='subtemplate' reserved='true'>beast.app.beauti.BeautiSubTemplate</map>
       <map name='Uniform'>beast.math.distributions.Uniform</map>
       <map name='Normal'>beast.math.distributions.Normal</map>
       <map name='OneOnX'>beast.math.distributions.OneOnX</map>
       <map name='LogNormal'>beast.math.distributions.LogNormalDistributionModel</map>
       <map name='Exponential'>beast.math.distributions.Exponential</map>
       <map name='Gamma'>beast.math.distributions.Gamma</map>
       <map name='Beta'>beast.math.distributions.Beta</map>
       <map name='LaplaceDistribution'>beast.math.distributions.LaplaceDistribution</map>
       <map name='InverseGamma'>beast.math.distributions.InverseGamma</map>
       <map name='prior'>beast.math.distributions.Prior</map>

       <beauticonfig spec='BeautiConfig'
       inputLabelMap='beast.core.MCMC.operator=Operators,
                beast.core.MCMC.logger=Loggers,
                        beast.evolution.sitemodel.SiteModel.mutationRate =Substitution Rate'
        inlinePlugins ='beast.core.MCMC.distribution,
            beast.evolution.sitemodel.SiteModel.substModel,
            beast.evolution.tree.coalescent.ExponentialGrowth,
            beast.evolution.tree.coalescent.ConstantPopulation,
            beast.evolution.tree.coalescent.Coalescent,
            beast.core.State.stateNode,
            bacter.model.ACGCoalescent.populationModel'
            collapsedPlugins ='beast.core.MCMC.logger'
            suppressPlugins = 'beast.core.MCMC.operator,
            beast.core.MCMC.operatorschedule,
            beast.core.MCMC.state,
            beast.core.MCMC.distribution,
            beast.core.MCMC.init,
            beast.evolution.tree.Tree,
            beast.evolution.tree.Tree.trait,
            beast.evolution.tree.Tree.taxa,
            beast.evolution.tree.Tree.taxonset,
            beast.util.TreeParser.initial,
            beast.util.TreeParser.taxa,
            beast.util.TreeParser.taxonset,
            beast.util.TreeParser.trait,
            beast.util.TreeParser.estimate,
            beast.util.ClusterTree.initial,
            beast.util.ClusterTree.taxa,
            beast.util.ClusterTree.taxonset,
            beast.util.ClusterTree.trait,
            beast.util.ClusterTree.estimate,
            beast.evolution.substitutionmodel.WAG.rates,
            beast.evolution.substitutionmodel.WAG.frequencies,
            beast.evolution.substitutionmodel.JTT.rates,
            beast.evolution.substitutionmodel.JTT.frequencies,
            beast.evolution.substitutionmodel.Blosum62.rates,
            beast.evolution.substitutionmodel.Blosum62.frequencies,
            beast.evolution.substitutionmodel.Dayhoff.rates,
            beast.evolution.substitutionmodel.Dayhoff.frequencies,
            beast.evolution.substitutionmodel.CPREV.rates,
            beast.evolution.substitutionmodel.CPREV.frequencies,
            beast.evolution.substitutionmodel.MTREV.rates,
            beast.evolution.substitutionmodel.MTREV.frequencies,
            beast.evolution.substitutionmodel.GTR.rates,
            beast.evolution.substitutionmodel.JukesCantor.frequencies,
            beast.math.distributions.Prior.x,
            beast.math.distributions.MRCAPrior.tree,
            beast.math.distributions.MRCAPrior.monophyletic,
            beast.math.distributions.MRCAPrior.taxonset,
            beast.evolution.operators.ScaleOperator.indicator,
            beast.core.Operator.weight,
            beast.core.Logger.model,
            bacter.model.ACGCoalescent.tree'>

        <panel spec='BeautiPanelConfig' panelname="Partitions" tiptext="Data Partitions"
            path='distribution/distribution[id="likelihood"]/distribution/data'
            hasPartitions="none" icon='2220.png.x' forceExpansion='FALSE'
            type='beast.evolution.alignment.Alignment' />

        <panel spec='BeautiPanelConfig' panelname="Tip Dates"
            tiptext="Allows to specify data that a taxon was sampled"
            path='tree'
            hasPartitions="Tree" icon='2.png.x' forceExpansion='TRUE'
            isVisible='true' />

        <panel spec='BeautiPanelConfig' panelname="Site Model"
            tiptext="Site model and substitution model specifications"
            path='siteModel'
            hasPartitions="SiteModel" icon='3.png.x' forceExpansion='TRUE' />

        <panel spec='BeautiPanelConfig' panelname="Clock Model" tiptext="Clock model"
            path='branchRateModel'
            hasPartitions="ClockModel" icon='4.png.x' forceExpansion='TRUE' />

        <panel spec='BeautiPanelConfig' panelname="Priors" tiptext="Other priors"
            path='distribution/distribution[id="prior"]/distribution'
            hasPartitions="none" icon='7.png.x' forceExpansion='TRUE_START_COLLAPSED'
            type='beast.core.Distribution'/>

        <panel spec='BeautiPanelConfig' panelname="Operators" tiptext="MCMC Operator details"
            path='operator'
            hasPartitions="none" icon='8.png.x' forceExpansion='TRUE_START_COLLAPSED'
            isVisible='false' buttonStatus='ADD_ONLY'/>

        <panel spec='BeautiPanelConfig' panelname="MCMC" tiptext="MCMC parameters"
            path=''
            hasPartitions="none" icon='9.png.x' forceExpansion='TRUE' />

        <alignmentProvider id="Import Alignment" spec='BeautiAlignmentProvider' template='@StandardPartitionTemplate'/>

        <partitiontemplate id='StandardPartitionTemplate' spec='BeautiSubTemplate'
            class='beast.evolution.likelihood.TreeLikelihood' mainid='mcmc'>
<![CDATA[

            <plugin spec="bacter.Locus" id="locus.$(n)">
                <alignment idref="data"/>
            </plugin>

            <!-- site model                                                              -->
            <plugin spec='SiteModel' id="SiteModel.s:$(n)" gammaCategoryCount='0'>
                <!--substModel will be automatically detected /-->
                <proportionInvariant spec='parameter.RealParameter' id='proportionInvariant.s:$(n)' value='0.0' lower='0' upper='1' estimate='false'/>
                <mutationRate        spec='parameter.RealParameter' id='mutationRate.s:$(n)' value='1.0'        estimate='false'/>
                <shape               spec='parameter.RealParameter' id='gammaShape.s:$(n)' value='1.0'         estimate='false'/>
            </plugin>

            <!-- ACG Likelihood -->
            <plugin spec='bacter.model.ACGLikelihood' id="treeLikelihood.$(n)">
                <data idref="data"/>
                <locus idref="locus.$(n)"/>
                <tree idref="Tree.t:$(n)"/>
                <siteModel idref="SiteModel.s:$(n)"/>
                <branchRateModel spec='StrictClockModel' id='StrictClock.c:$(n)'>
                    <clock.rate id='clockRate.c:$(n)' spec='parameter.RealParameter' value='1.0' estimate='false'/>
                </branchRateModel>
            </plugin>

            <!-- ACG Coalescent -->

            <plugin spec='bacter.model.ACGCoalescent' id="CoalescentConstant.t:$(n)">
                <tree idref="Tree.t:$(n)"/>
                <rho id="rho.t:$(n)" spec="parameter.RealParameter" value="0.001"/>
                <delta id="delta.t:$(n)" spec="parameter.RealParameter" value="1000"/>
                <populationModel id="popModelConstant.t:$(n)" spec="beast.evolution.tree.coalescent.ConstantPopulation">
                    <popSize id="popSize.t:$(n)" spec="parameter.RealParameter" value="1" />
                </populationModel>
            </plugin>

            <!-- ACG -->
            <plugin spec='bacter.model.SimulatedACG' id='Tree.t:$(n)' estimate='true' rho="0.0" delta="1000">
                <locus idref="locus.$(n)"/>
                <taxonset spec='beast.evolution.alignment.TaxonSet'>
                    <alignment idref="data"/>
                </taxonset>
                <populationModel spec="beast.evolution.tree.coalescent.ConstantPopulation">
                    <popSize spec="parameter.RealParameter" value="1" />
                </populationModel>
            </plugin>

            <!-- Parameter priors -->
            <prior id='rhoPrior.t:$(n)' x='@rho.t:$(n)'>
                <distr spec="beast.math.distributions.OneOnX"/>
            </prior>
            <prior id='deltaPrior.t:$(n)' x='@delta.t:$(n)'>
                <distr spec="beast.math.distributions.OneOnX"/>
            </prior>
            <prior id='popSizePrior.t:$(n)' x='@popSize.t:$(n)'>
                <distr spec="beast.math.distributions.OneOnX"/>
            </prior>

            <prior id='GammaShapePrior.s:$(n)' x='@gammaShape.s:$(n)'>
                <distr spec="beast.math.distributions.Exponential" mean='1'/>
            </prior>
            <prior id='PropInvariantPrior.s:$(n)' x='@proportionInvariant.s:$(n)'>
                <distr spec="beast.math.distributions.Uniform" lower='0' upper='1'/>
            </prior>
            <prior id='ClockPrior.c:$(n)' x='@clockRate.c:$(n)'>
                <distr spec="beast.math.distributions.Uniform" upper='Infinity'/>
            </prior>
            <prior id='MutationRatePrior.s:$(n)' x='@mutationRate.s:$(n)'>
                <distr spec="OneOnX"/>
            </prior>

            <!-- ACG operators -->

            <operator id="ACGscale.t:$(n)" spec="bacter.operators.ACGScaler" weight="1.0"
                scaleFactor="0.8">
                <acg idref="Tree.t:$(n)"/>
            </operator>

            <operator id="ACGupDown1.t:$(n)" spec="bacter.operators.ACGScaler" weight="1.0"
                scaleFactor="0.8">
                <acg idref="Tree.t:$(n)"/>
                <parameterInverse idref="rho.t:$(n)"/>
                <parameterInverse idref="clockRate.c:$(n)"/>
            </operator>

            <operator id="ACGupDown2.t:$(n)" spec="bacter.operators.ACGScaler" weight="1.0"
                scaleFactor="0.8">
                <acg idref="Tree.t:$(n)"/>
                <parameterInverse idref="clockRate.c:$(n)"/>
            </operator>

            <operator id="ACGupDown3.t:$(n)" spec="bacter.operators.ACGScaler" weight="1.0"
                scaleFactor="0.8">
                <acg idref="Tree.t:$(n)"/>
                <parameterInverse idref="rho.t:$(n)"/>
            </operator>

            <operator id="addRemoveRedundant.t:$(n)" acg="@Tree.t:$(n)"
                spec="bacter.operators.AddRemoveRedundantConversion" weight="1.0"/>

            <operator id="CRswap.t:$(n)" spec="bacter.operators.ConvertedRegionSwap" weight="1.0"
                acg="@Tree.t:$(n)"/>

            <operator id="CRshift.t:$(n)" spec="bacter.operators.ConvertedRegionShift" weight="1.0"
                acg="@Tree.t:$(n)" apertureSize="0.01" />

            <operator id="CRBshift.t:$(n)" spec="bacter.operators.ConvertedRegionBoundaryShift" weight="1.0"
                acg="@Tree.t:$(n)" apertureSize="0.01" />

            <operator id="mergeSplit.t:$(n)" spec="bacter.operators.MergeSplitConversion" weight="1.0"
                acg="@Tree.t:$(n)" />

            <operator id="CEhop.t:$(n)" spec="bacter.operators.ConvertedEdgeHop" weight="1.0"
                acg="@Tree.t:$(n)" />

            <operator id="CEflip.t:$(n)" spec="bacter.operators.ConvertedEdgeFlip" weight="1.0"
                acg="@Tree.t:$(n)" />

            <operator id="CEslide.t:$(n)" spec="bacter.operators.ConvertedEdgeSlide" weight="1.0"
                acg="@Tree.t:$(n)" apertureSize="0.05" />

            <!-- Parameter operators -->
            <operator id='popSizeScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8"
                weight="1" parameter="@popSize.t:$(n)"/>
            <operator id='rhoScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8"
                weight="1" parameter="@rho.t:$(n)"/>
            <operator id='deltaScaler.t:$(n)' spec='ScaleOperator' scaleFactor="0.8"
                weight="1" parameter="@delta.t:$(n)"/>

            <operator id='proportionInvariantScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5"
                weight="0.1" parameter="@proportionInvariant.s:$(n)"/>
            <operator id='mutationRateScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5"
                weight="0.1" parameter="@mutationRate.s:$(n)"/>
            <operator id='gammaShapeScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5"
                weight="0.1" parameter="@gammaShape.s:$(n)"/>
            <operator id='allTipDatesRandomWalker.t:$(n)' spec='TipDatesRandomWalker'
                windowSize="1" weight="0" tree="@Tree.t:$(n)"/>
            <operator id='StrictClockRateScaler.c:$(n)' spec='ScaleOperator' scaleFactor="0.75"
                weight="3" parameter='@clockRate.c:$(n)'/>

            <!-- ACG logger -->
            <plugin id='ACGlogger.t:$(n)' spec='beast.core.Logger' logEvery='10000'
                fileName='$(filebase).$(tree).trees' mode='tree'
                log='@Tree.t:$(n)'/>

            <plugin id='ACGStatsLog.t:$(n)'
                spec='bacter.util.ConversionGraphStatsLogger'
                acg='@Tree.t:$(n)'/>
]]>
            <plate fragment="popModelDependentACGOperators" var="model" range="popModelConstant"/>

            <connect srcID='treeLikelihood.$(n)' targetID='likelihood' inputName='distribution' if="isInitializing"/>
            <connect method="beast.app.beauti.SiteModelInputEditor.customConnector"/>

            <connect method="bacter.beauti.CustomConnectors.applyRestrictions"/>

            <!-- Ensure locus is present in tree -->
            <connect srcID="locus.$(n)" targetID="Tree.t:$(n)" inputName="locus"
                     if="inlikelihood(Tree.t:$(n))"/>

            <!-- CONNECT: Priors -->
            <connect srcID='CoalescentConstant.t:$(n)' targetID='prior' inputName='distribution'
                     if="isInitializing"/>

            <connect srcID='rhoPrior.t:$(n)' targetID='prior' inputName='distribution'
                if="inlikelihood(Tree.t:$(n)) and rho.t:$(n)/estimate=true"/>
            <connect srcID='deltaPrior.t:$(n)' targetID='prior' inputName='distribution'
                if="inlikelihood(Tree.t:$(n)) and delta.t:$(n)/estimate=true"/>
            <connect srcID='popSizePrior.t:$(n)' targetID='prior' inputName='distribution'
                if="inlikelihood(ConstantCoalescent.t:$(n)) and Tree.t:$(n)/estimate=true"/>

            <connect srcID='GammaShapePrior.s:$(n)' targetID='prior' inputName='distribution'
                     if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'>
                Prior on gamma shape for partition s:$(n)</connect>
            <connect srcID='PropInvariantPrior.s:$(n)' targetID='prior' inputName='distribution'
                     if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'>
                Prior on proportion invariant for partition s:$(n)</connect>
            <connect srcID='ClockPrior.c:$(n)' targetID='prior' inputName='distribution'
                     if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>
            <connect srcID='MutationRatePrior.s:$(n)' targetID='prior' inputName='distribution'
                     if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>

            <!-- CONNECT: State -->
            <connect srcID='Tree.t:$(n)' targetID='state' inputName='stateNode'
                if='inlikelihood(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='rho.t:$(n)' targetID='state' inputName='stateNode'
                if="inposterior(rho.t:$(n)) and rho.t:$(n)/estimate=true"/>
            <connect srcID='delta.t:$(n)' targetID='state' inputName='stateNode'
                if="inposterior(delta.t:$(n)) and delta.t:$(n)/estimate=true"/>
            <connect srcID='popSize.t:$(n)' targetID='state' inputName='stateNode'
                     if="inposterior(ConstantCoalescent.t:$(n)) and popSize.t:$(n)/estimate=true"/>

            <connect srcID='proportionInvariant.s:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='mutationRate.s:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='gammaShape.s:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
            <connect srcID='clockRate.c:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>

            <!-- CONNECT: Operators -->
            <connect srcID='rhoScaler.t:$(n)' targetID='mcmc' inputName='operator'
                if='inposterior(rho.t:$(n)) and rho.t:$(n)/estimate=true'/>
            <connect srcID='deltaScaler.t:$(n)' targetID='mcmc' inputName='operator'
                if='inposterior(delta.t:$(n)) and delta.t:$(n)/estimate=true'/>

            <connect srcID='proportionInvariantScaler.s:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'>
                Scales proportion of invariant sites parameter of partition $(n)</connect>
            <connect srcID='mutationRateScaler.s:$(n)' targetID='mcmc' inputName='operator'
                     if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'>
                Scales mutation rate of partition s:$(n)</connect>
            <connect srcID='gammaShapeScaler.s:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'>
                Scales gamma shape parameter of partition s:$(n)</connect>
            <connect srcID='StrictClockRateScaler.c:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'>
                Scale clock rate of partition c:$(n)</connect>
            <connect srcID='allTipDatesRandomWalker.t:$(n)'   targetID='mcmc' inputName='operator'
                     if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true and allTipDatesRandomWalker.t:$(n)/weight!=0.0'>
                Estimates tip dates for tree t:$(n)</connect>

            <connect srcID='ACGupDown1.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true and inposterior(rho.t:$(n)) and rho.t:$(n)/estimate=true and inposterior(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>
            <connect srcID='ACGupDown2.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true and inposterior(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>
            <connect srcID='ACGupDown3.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true and inposterior(rho.t:$(n)) and rho.t:$(n)/estimate=true'/>

            <connect srcID='ACGscale.t:$(n)' targetID='mcmc' inputName='operator'
                if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>

            <connect srcID='addRemoveRedundant.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>

            <connect srcID='CRswap.t:$(n)' targetID='mcmc' inputName='operator'
                if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='CRshift.t:$(n)' targetID='mcmc' inputName='operator'
                if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='CRBshift.t:$(n)' targetID='mcmc' inputName='operator'
                if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='mergeSplit.t:$(n)' targetID='mcmc' inputName='operator'
                if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='CEhop.t:$(n)' targetID='mcmc' inputName='operator'
                if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='CEflip.t:$(n)' targetID='mcmc' inputName='operator'
                if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='CEslide.t:$(n)' targetID='mcmc' inputName='operator'
                if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>

            <connect srcID='popSizeScaler.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(popSize.t:$(n)) and popSize.t:$(n)/estimate=true'/>

            <!-- CONNECT: Logs -->
            <connect srcID="ACGlogger.t:$(n)" targetID="mcmc" inputName="logger"
                     if="inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true"/>
            <connect srcID="ACGStatsLog.t:$(n)" targetID="tracelog" inputName="log"
                     if="inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true"/>
            <connect srcID='rho.t:$(n)' targetID='tracelog' inputName='log'
                if="inposterior(Tree.t:$(n)) and rho.t:$(n)/estimate=true"/>
            <connect srcID='delta.t:$(n)' targetID='tracelog' inputName='log'
                if="inposterior(Tree.t:$(n)) and delta.t:$(n)/estimate=true"/>

            <connect srcID='popSize.t:$(n)' targetID='tracelog' inputName='log'
                     if='inposterior(CoalescentConstant.t:$(n)) and popSize.t:$(n)/estimate=true'/>

            <connect srcID='proportionInvariant.s:$(n)' targetID='tracelog' inputName='log'
                     if='inposterior(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='mutationRate.s:$(n)' targetID='tracelog' inputName='log'
                     if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='gammaShape.s:$(n)' targetID='tracelog' inputName='log'
                     if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
            <connect srcID='clockRate.c:$(n)' targetID='tracelog' inputName='log'
                     if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>
        </partitiontemplate>

        <mergepoint id='substModelTemplates'/>
        <!--mergepoint id='bacterClockModelTemplates'/-->
        <mergepoint id='parametricDistributions'/>
        <mergepoint id='ACGPriorTemplates'/>
    </beauticonfig>

    <!--mergepoint id="operatorMergePoint"/-->
    <fragment id='popModelDependentACGOperators' spec="beast.app.beauti.Fragment">
        <![CDATA[
            <operator id="addRemove_$(model).t:$(n)" spec="bacter.operators.AddRemoveConversion" weight="10.0">
                <acg idref="Tree.t:$(n)"/>
                <delta idref="delta.t:$(n)"/>
                <populationModel idref="$(model).t:$(n)"/>
            </operator>

            <operator id="addRemoveDetour_$(model).t:$(n)" spec="bacter.operators.AddRemoveDetour" weight="10.0"
                acg="@Tree.t:$(n)" delta="@delta.t:$(n)" populationModel="@$(model).t:$(n)"/>

            <operator id="CFUniform_$(model).t:$(n)" spec='bacter.operators.CFUniform' acg="@Tree.t:$(n)"
                rho="@rho.t:$(n)" delta="@delta.t:$(n)" populationModel="@$(model).t:$(n)" weight="10"/>

            <operator id="CFWB_$(model).t:$(n)" spec='bacter.operators.CFWilsonBalding'
                acg="@Tree.t:$(n)" rho="@rho.t:$(n)" delta="@delta.t:$(n)" populationModel="@$(model).t:$(n)"
                alpha="0.1" weight="10"/>

            <operator id="CFCS_$(model).t:$(n)" spec='bacter.operators.CFConversionSwap'
                acg="@Tree.t:$(n)" rho="@rho.t:$(n)" delta="@delta.t:$(n)" populationModel="@$(model).t:$(n)"
                weight="10"/>

            <operator id="CFSTS_$(model).t:$(n)" spec='bacter.operators.CFSubtreeSlide'
                  acg="@Tree.t:$(n)" rho="@rho.t:$(n)" delta="@delta.t:$(n)" populationModel="@$(model).t:$(n)"
                  scaleFactor="0.8" weight="10"/>

            <operator id="CFSTXnarrow_$(model).t:$(n)" spec='bacter.operators.CFSubtreeExchange'
                  acg="@Tree.t:$(n)" rho="@rho.t:$(n)" delta="@delta.t:$(n)" populationModel="@$(model).t:$(n)"
                  isNarrow="true" weight="10"/>

            <operator id="CFSTXwide_$(model).t:$(n)" spec='bacter.operators.CFSubtreeExchange'
                  acg="@Tree.t:$(n)" rho="@rho.t:$(n)" delta="@delta.t:$(n)" populationModel="@$(model).t:$(n)"
                  isNarrow="false" weight="10"/>

        ]]>
        <connect srcID='addRemove_$(model).t:$(n)' targetID='mcmc' inputName='operator'
                 if='inposterior($(model).t:$(n)) and Tree.t:$(n)/estimate=true'/>
        <connect srcID='addRemoveDetour_$(model).t:$(n)' targetID='mcmc' inputName='operator'
                 if='inposterior($(model).t:$(n)) and Tree.t:$(n)/estimate=true'/>
        <connect srcID='CFUniform_$(model).t:$(n)' targetID='mcmc' inputName='operator'
                 if='inposterior($(model).t:$(n)) and Tree.t:$(n)/estimate=true'/>
        <connect srcID='CFWB_$(model).t:$(n)' targetID='mcmc' inputName='operator'
                 if='inposterior($(model).t:$(n)) and Tree.t:$(n)/estimate=true'/>
        <connect srcID='CFCS_$(model).t:$(n)' targetID='mcmc' inputName='operator'
                 if='inposterior($(model).t:$(n)) and Tree.t:$(n)/estimate=true'/>
        <connect srcID='CFSTS_$(model).t:$(n)' targetID='mcmc' inputName='operator'
                 if='inposterior($(model).t:$(n)) and Tree.t:$(n)/estimate=true'/>
        <connect srcID='CFSTXnarrow_$(model).t:$(n)' targetID='mcmc' inputName='operator'
                 if='inposterior($(model).t:$(n)) and Tree.t:$(n)/estimate=true'/>
        <connect srcID='CFSTXwide_$(model).t:$(n)' targetID='mcmc' inputName='operator'
                 if='inposterior($(model).t:$(n)) and Tree.t:$(n)/estimate=true'/>
    </fragment>

<!--
<operator spec='DeltaExchangeOperator' id='FixMeanRatesOperator' weight='2' delta='0.75'/>
-->

<!-- framework for main model -->

    <run spec="MCMC" id="mcmc" chainLength="10000000" storeEvery="10000">

        <state storeEvery='5000' id='state'>
        </state>

        <distribution spec="CompoundDistribution" id="posterior">
            <distribution spec="CompoundDistribution" id="prior">
            </distribution>
            <distribution spec="CompoundDistribution" id="likelihood">
            </distribution>
        </distribution>

        <logger id='tracelog' logEvery="1000" fileName="$(filebase).log">
            <log idref="posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>

        <logger id='screenlog' logEvery="1000">
            <!--model idref='posterior'/-->
            <log idref="posterior"/>
            <ESS spec='ESS' name='log' arg="@posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>
    </run>

</beast>

